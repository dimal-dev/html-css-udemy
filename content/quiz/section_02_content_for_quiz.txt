<Previous Lessons>
<SECTION 1>
    <Lesson 2>
    Now that you installed Google Chrome and VS Code, we are ready to create our first web page using HTML. To do that, let's go to the desktop and create a new folder. We will call it my-website.

    This folder will contain all the code, files and images we will use in this course. It doesn't have to be created on the desktop, just make sure you remember where the folder is. Now that we have the folder for our website, let's open it in VS Code. So I'm gonna start VS Code. Then we'll go to the File menu and then Open Folder.

    Next, we'll find and select the folder we just created. And then we'll click Open. If VS Code asks, confirm that you trust the authors of the files in this folder to enable all VS Code features. And let's close the Welcome tab.

    Now you should be able to see the folder name in the Explorer here. If you don't see the Explorer, like this, click on this icon to open it.

    And we're ready to start creating our first web page in VS Code. To do that, we will click on this icon to create a new file. Then, we'll type the name of the file, which is web-page.html, where .html is a file extension. It tells the computer that this file contains HTML code and not an image, video, or text.

    Now we'll press Enter to actually create the file. And inside this area we can modify its content. Let's write our first HTML code here and create a text field. To do that, we'll type left angle bracket, input, right angle bracket.

    If you see an angle bracket on your keyboard, but when you press it another symbol appears, then try to hold the Shift key and then press the key with the angle bracket.

    Next, we will save our HTML code, because this dot here shows that we've made some changes to the file, and for other programs to see these changes, we need to save them. To save the file, we'll go to the File menu and then click Save. Next, let's learn how to view our web page in the browser. For that, go to the folder that contains our code,

    Right-click on our HTML file, open with, Google Chrome. And this opens our web page. I'll zoom in to see it better. And there's that text field that we created in our code. Let's type, well done. Great, this means our web page works properly.
    </Lesson 2>
    <Lesson 3>
    Next, we'll place Google Chrome and VS Code side by side so that we can have a better view.

    And we'll click this icon to hide the file explorer to have more space in the editor. Now let's add plain text to our HTML file and see what happens when we open it in the browser. We'll write name right after the input. And now we've got this dot again, which means we need to save our changes. If we don't save and reload the page, the text won't appear.

    because the browser can't see our latest version of the file until we save it. This is a common mistake. If you write HTML code but don't see it in the browser, make sure to save the file first. So, to save, go to the File menu and then Save. And now, in the browser, click this to load the latest version of our web page. And there is this name text beside the text field.

    In our file, this is regular text and this is an HTML instruction. This instruction creates an HTML element. An HTML element is just a part of our web page. It can be a text field, an image, or a link. HTML elements have special meaning and behavior compared to regular text.

    And we need to follow specific rules to add HTML elements in our code. These rules are called HTML syntax. HTML syntax is like grammar rules in English. It helps us to explain the computer what to do in a way it can understand.

    According to HTML syntax, we start an HTML element with the left angle bracket. Then we write the name of the element, its input in our case. Finally, we end it by using the right angle bracket. There should be no spaces between the left angle bracket and the element name. If I add a space here, like this, I'm breaking the syntax. So let's see what happens in the browser.

    Save. Reload. And our text field has turned into regular text. This is one of the things that happen when we break the HTML syntax. Okay, let me remove the space to make sure the code follows the syntax rules.

    And this time we will use a better way to save the file. We will use a keyboard shortcut. Keyboard shortcuts help us work faster and more efficiently. Professional programmers are using lots of keyboard shortcuts to save time. To learn the shortcut for saving the file, we will open the File menu and we will see the shortcut here. It's Command S for Mac and Control S for Windows.

    So let's use the shortcut to save the file. I'll press command S and the dot is gone.

    And to reload our page in the browser, we will also use a keyboard shortcut. It's CMD R for Mac and CTRL R for Windows. Remember this shortcut. You will use it often. So let's reload our page. I'll press CMD R. And the browser shows the text field again because our HTML code is valid and follows syntax rules.

    Also, HTML syntax does not allow spaces or other symbols in an element's name. For example, doing something like this breaks the syntax. And if we save and reload the page, the text field is completely gone. I'm gonna remove this extra space to make our HTML code valid again.

    And we need to use certain predefined names for our HTML elements. We cannot use non-existing or made-up names. For example, if I add s here, so inputs, this element name doesn't exist in HTML.

    which makes our code incorrect or invalid. And if we press CMD S to save the file and CMD R to reload the page, the text field also disappears completely, because now we break the rules of HTML syntax. So let's remove this to use a correct name and make our code valid again. CMD S, CMD R and the text field is back.

    Throughout this course, you will learn many different HTML elements and what names to use for them to have valid HTML.
    </Lesson 3>

    <Lesson 4>
    Now, let's move this text to the next line for better visual separation. To do that normally, in a text editor like Microsoft Word or Google Docs, we would place the cursor here, press Enter, and expect the text and the input to appear on their own lines in the browser. Let's save the file and see what happens. Reload. Hmm.

    The text didn't move to the next line. The only thing that's changed is now we have this extra space here. This is an interesting feature of HTML. It ignores new lines. And it doesn't matter how many new lines we add to our HTML code. The browser shows them just as one space.

    Now let's replace all these new lines with one space in our code and see what happens. Save with command S, reload with command R. No changes, just one space. What's also interesting is that if we add multiple spaces like this, the browser will ignore them too and show only one space instead.

    So, remember that multiple spaces and new lines in HTML code are displayed as one space. This may seem weird at first, but later in this tutorial I'll show you that this behavior is incredibly useful for formatting our HTML code to make it easy to read and understand.

    Let's remove these extra spaces and place them on separate lines. Okay, if we can't use new lines and spaces to move our elements to the next line, what can we use?

    We can use another HTML element. To create that element, we'll write left-angle bracket, p, and right-angle bracket. Notice that VS Code helps us here and adds this piece of code for us. Next, we will move this text inside. P stands for paragraph.

    And this is now a paragraph HTML element that contains the name text. Save with command S, reload with command R, and now this text is on its own line. So this is the paragraph HTML element. It looks different from this input element we used to create a text field.

    The paragraph element has three parts. This first part is called an opening tag. An opening tag has a left angle bracket followed by the element name, like P for paragraph, and then the right angle bracket.

    An opening tag starts an HTML element. It says, here, this paragraph begins. Next goes the second part of the paragraph — the content. The content of this paragraph is this text name.

    Later, you'll learn that other HTML elements, like text fields or images, can also be a part of the content. And this is the last part of the paragraph and it's called a closing tag. A closing tag ends an HTML element.

    We know it's a closing tag because it has this slash between the angle bracket and the element name. And according to HTML syntax rules, the closing tag must always contain this slash.

    The opening and closing tags don't appear on the page in the browser. Only the content of the paragraph is displayed, which is the name text. So, every paragraph has three parts — an opening tag, a closing tag, and the content in between.

    And according to the rules of HTML syntax, they must go in this specific order. First an opening tag, then the content, and then the closing tag. If we place them in different order, like this for example, it breaks the syntax rules, the browser gets confused, and the HTML code might not work correctly. So let me undo the changes to make the code valid.
    </Lesson 4>

    <Quiz 1>
        <lessons the quizz covers>Lesson 2, Lesson 3, Lesson 4</lessons the quizz covers>
        <Insert after>Lesson 4</Insert after>
        <Quizz Title>
            Your First Steps with HTML
        </Quizz Title>

        <Quizz description>
            Great job getting started! Let's test your progress and keep your momentum going.
        </Quizz description>

    <Question 1>
      <Description>
        What does the .html extension tell your computer?
      </Description>
      <Answer 1>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          That the file contains HTML code
        </Content>
        <Explanation>
          Why? The .html extension signals that the file contains HTML code so browsers can process and display it correctly.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          That the file contains an image
        </Content>
        <Explanation>
          Why? .html is not used for images; formats like .jpg or .png are.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          That the file is a text document
        </Content>
        <Explanation>
          Why? Plain text files typically have a .txt extension, not .html.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 2
      </Where discussed>
    </Question 1>

    <Question 2>
      <Description>
        What happens if you forget to save your HTML file before refreshing the browser?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          The browser automatically saves it
        </Content>
        <Explanation>
          Why? Browsers do not save your code automatically—you must manually save the file in VS Code.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          The browser won’t show your latest changes
        </Content>
        <Explanation>
          Why? Without saving, the browser loads the old version of the file, missing any new edits.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          The file disappears
        </Content>
        <Explanation>
          Why? The file stays but just won’t reflect new changes until it’s saved and reloaded.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 3
      </Where discussed>
    </Question 2>

    <Question 3>
      <Description>
        Which of these will correctly create a text field in HTML?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <input/>
        </Content>
        <Explanation>
          Why? This syntax is incorrect for HTML input elements—no slash is needed inside the tag.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          <input>
        </Content>
        <Explanation>
          Why? <input> is the correct syntax to create a text field in HTML.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <input field>
        </Content>
        <Explanation>
          Why? "field" is not part of valid input syntax; this breaks the HTML syntax rules.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 2
      </Where discussed>
    </Question 3>

    <Question 4>
      <Description>
        You see your text field turning into regular text on the browser. What’s the most likely cause?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          You used lowercase letters
        </Content>
        <Explanation>
          Why? HTML is not case-sensitive for tag names, so lowercase letters won’t cause issues.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          You added a space between the bracket and the tag name
        </Content>
        <Explanation>
          Why? A space after the left angle bracket breaks HTML syntax and causes the tag to be treated as plain text.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          You didn’t close the VS Code editor
        </Content>
        <Explanation>
          Why? Whether the editor is closed has no effect on how the browser renders HTML.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 3
      </Where discussed>
    </Question 4>

    <Question 5>
      <Description>
        In a real-world scenario, you're writing a short paragraph for your website. Which HTML element should you use?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <input>
        </Content>
        <Explanation>
          Why? The <input> element creates form fields, not paragraphs of text.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          <p>
        </Content>
        <Explanation>
          Why? <p> is the paragraph element used for text content in HTML.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <line>
        </Content>
        <Explanation>
          Why? <line> is not a valid HTML element for paragraph text.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 4
      </Where discussed>
    </Question 5>
    </Quiz 1>


    <Lesson 5>
    To practice creating paragraphs, let's add one more. To do that, we will write left angle bracket, P, and right angle bracket. And VS Code adds the closing tag automatically. For the content of our paragraph, we'll write something like this is a paragraph. Save, reload, and now our page shows this additional paragraph on its own line, just like we coded it to do.

    Notice that the input only has an opening tag, whereas the paragraph has also the content and the closing tag. This is because the input, by its nature, doesn't need content.

    It creates a text field where the website users type in the content. And since the input doesn't have the content, it's called a void element. A void element, like our input, has only one part — an opening tag. This is where it starts and ends. On the other hand, paragraphs are meant to have the content,

    And so they need to have the closing tag to show where the content ends. And because a paragraph element has content, it's called a non-void element. HTML has many other elements, not just paragraphs and inputs.

    and they all belong to one of these two groups. Void elements, like our input, without content, and non-void elements, like our paragraph, with content. We can have many inputs on our web page. Let's add one more.

    For that we will write left angle bracket, then the element name, so input, and then the right angle bracket. We learned that input is a void element, so we don't need a closing tag. Save. Reload. And here is our second text field. Now you know how to create an input HTML element.

    which is a very important element and it's often used on websites to collect data from users. For example, Amazon uses a text field to ask for your email on the sign-in page. And Google uses an input for the search bar. Their text fields look a bit different because Amazon and Google use CSS to change their appearance.

    Later in this course, we will learn how to style text fields with CSS and how to create a professional-looking search bar for the Reddit clone project.
    </Lesson 5>

    <Lesson 6>
    Notice that the browser displays the HTML elements in the exact same order as we place them in our code. This input goes first in our code and first on the page.

    then this paragraph goes after the input in the code and on the page. And the same applies to the remaining elements. Let's change the order of our elements in the code and see how it affects our page. For that we will move this paragraph to the top, like this.

    save, reload, and now this paragraph appears first on the web page just as in the code. And if we move this paragraph up, save, reload, and now it goes after the first paragraph on the web page. So the browser displays the HTML elements on the page in the same order as they go in our code, from top to bottom, left

    to write. Also, notice that when we moved this paragraph up, our text fields started appearing on the same line. This is because input elements behave like text. By default, they go one after another on the same line as if they are words in a sentence.

    And there is this space between the inputs because we have a new line here. And HTML replaces it with just one space. So let's remove this new line and see what happens. Save. Reload. The space disappeared.

    Now, what if we want our text fields to appear on their own separate lines? For that, we can use paragraphs just like with text. But this time, instead of text, we will put an input HTML element inside the paragraph.

    So let's create a paragraph for the first input left angle bracket P right angle bracket to start a paragraph and VS code adds the closing tag automatically next let's place this input inside the paragraph and let's do the same for the second input and

    Now, this input becomes the content of the paragraph. Save, reload, and the inputs are on separate lines. So, as you can see, we can place other HTML elements inside our paragraphs as their content. Doing so is called nesting. So, nesting is when we place HTML elements as content inside other HTML elements.

    Now let's use that feature of HTML where it ignores new lines and extra spaces to format this piece of code to make it easier to read. For that, we will place the cursor right after the opening tag here and then press Enter.

    The input moves to the next line, but it also gains this extra space to the left. This extra space is just four spaces that VS Code automatically adds for us to make our life easier. Next, let's place the cursor right after the input element and press Enter again. This time, VS Code moves the closing tag to the next line without adding extra spaces.

    And now the opening and closing tags align vertically to make it easier for us to see where our paragraph starts and where it ends. And if we save and reload the page, nothing has changed visually on the page, because HTML ignores new lines and extra spaces. But formatting our code like this makes the code much easier to read and work with.

    Now let's do the same for the second input. Save, reload and again nothing has changed.
    </Lesson 6>

    <Lesson 7>
    Okay, this element inside the paragraph is called a child element and this paragraph is called a parent element. So a child element is an element that's inside another element.

    And a parent element is an element that contains other elements. In HTML, you will hear these terms, child and parent elements, quite often. And in programming, when an element is placed slightly to the right, like this input, it is called indenting. Indenting our code this way makes it easier to see parent and child elements.

    And we're not limited to have only one child element inside a paragraph. We can place as many child elements as we want in it. So let's add one more input element here and move this text inside the paragraph. And let's remove this paragraph since it's an empty paragraph and we don't need it anymore.

    And so according to HTML syntax this is perfectly valid HTML code and it should work just fine. So let's save the file and reload the page. And now we have this name and input on the same line and the second input goes on the next line.

    This is because there is no more horizontal space available, so the browser moves it to the next line. But if I resize the window, now there is enough horizontal space and the text and two text fields are on the same line as children of that paragraph. Because remember, inputs by default behave like words in a sentence.

    So both these input elements are children of this paragraph. And this paragraph is a parent element to these inputs. And this is just plain text. In HTML we can put plain text among other HTML elements.

    In HTML we are allowed to nest inputs inside paragraphs, but we're not allowed to nest paragraphs inside paragraphs. So if we add another paragraph inside with some text...

    This becomes invalid HTML and may not work or could produce unexpected results on some devices and browsers. So we cannot put or nest paragraphs inside other paragraphs.

    because paragraphs in HTML are designed only to contain text or text elements like inputs or links. So let's remove this to make our HTML valid. If all that information feels like a little bit too much, don't worry. HTML is easy to learn but has a lot of details to remember. Don't expect to remember all these details right away. You'll learn them over time with practice.

    </Lesson 7>

    <Quiz 2>
    <lessons the quizz covers>
      Lesson 5, Lesson 6, Lesson 7
    </lessons the quizz covers>
    <Insert after>
      Lesson 7
    </Insert after>
    <Quizz Title>
      Understanding HTML Element Behavior
    </Quizz Title>
    <Quizz description>
      Check how well you grasp the structure and nesting of HTML elements.
    </Quizz description>

    <Question 1>
      <Description>
        What is a void HTML element?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          An element that is invisible on the web page
        </Content>
        <Explanation>
          Why? Visibility doesn't define void elements; it's about having no content or closing tag.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          An element that does not contain content and has no closing tag
        </Content>
        <Explanation>
          Why? Void elements like <input> do not need a closing tag and have no content inside them.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          An element used only for debugging HTML
        </Content>
        <Explanation>
          Why? There are no such elements used solely for debugging in HTML.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 5
      </Where discussed>
    </Question 1>

    <Question 2>
      <Description>
        Which of the following describes a non-void element?
      </Description>
      <Answer 1>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          It has an opening tag, content, and a closing tag
        </Content>
        <Explanation>
          Why? Non-void elements like <p> include all three parts: an opening tag, content, and a closing tag.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          It must always contain an input field
        </Content>
        <Explanation>
          Why? Non-void elements can contain any valid content, not just input fields.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          It has only one tag and no content
        </Content>
        <Explanation>
          Why? That describes a void element, not a non-void one.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 5
      </Where discussed>
    </Question 2>

    <Question 3>
      <Description>
        What is nesting in HTML?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Placing an HTML element next to another element
        </Content>
        <Explanation>
          Why? Nesting involves placing elements inside other elements, not beside them.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          Placing one HTML element inside another
        </Content>
        <Explanation>
          Why? Nesting refers to putting child elements inside parent elements like inputs inside a paragraph.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Indenting lines of code with spaces
        </Content>
        <Explanation>
          Why? Indenting improves readability but is not the definition of nesting.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 6
      </Where discussed>
    </Question 3>

    <Question 4>
      <Description>
        You want two input fields to appear on separate lines. What’s the most effective way to do that?
      </Description>
      <Answer 1>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          Wrap each input inside a separate <p> element
        </Content>
        <Explanation>
          Why? Paragraphs force the inputs to render on separate lines due to default block behavior.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Add multiple spaces between them
        </Content>
        <Explanation>
          Why? HTML ignores extra spaces and will not place the inputs on separate lines.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Use a closing tag after each input
        </Content>
        <Explanation>
          Why? <input> is a void element and doesn’t require or support a closing tag.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 6
      </Where discussed>
    </Question 4>

    <Question 5>
      <Description>
        Which of the following is an invalid HTML structure?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <p><input></p>
        </Content>
        <Explanation>
          Why? Inputs can be placed inside paragraphs, making this structure valid.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          <p><p>This is wrong</p></p>
        </Content>
        <Explanation>
          Why? HTML does not allow paragraphs nested inside other paragraphs.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <p>Name <input></p>
        </Content>
        <Explanation>
          Why? A mix of plain text and inputs inside a paragraph is valid HTML.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 7
      </Where discussed>
    </Question 5>
    </Quiz 2>

    <Lesson 8>
    Next, we will learn how to create checkboxes using HTML attributes. For this, let's create a new page. So we will click this icon to open the File Explorer. And then to create a new file, we will click this icon. Let's call it attributes.html.

    And let's click this icon again to hide the File Explorer to have more space and focus on the code. Next, we will open the attributes.html file in Google Chrome. To do that, we will go to the folder that contains our website files, then right-click on the attributes.html that we just created,

    Open with Google Chrome. This opens our new web page, which is empty for now because we haven't written any code yet. So now let's add a checkbox to this page. To do that, first we will write left angle bracket input and right angle bracket.

    You already know that this is an input HTML element that creates a text field on our web page. And if we save and reload, we have a text field that we can fill in. Let me zoom in with CMD plus for Mac or CTRL plus for Windows to see it better. Now to create a checkbox instead of this text field, we will learn a new feature of HTML called Attributes.

    For that, we will place the cursor here, between the element's name and the right angle bracket. Then we will write space, type, equals. And VS Code adds this pair of quotes for us automatically. And inside the quotes, we will write checkbox. Make sure that you write it exactly as I have it here, otherwise it won't work.

    Now save, reload and just like that with this small change we turned a text field into a checkbox that we can click to check and uncheck. So this piece of code that we added to our input is quite powerful and is called an HTML attribute.

    An attribute configures an HTML element and can change how the element works. Attributes in HTML are just like the settings on your phone or computer that you can use to change how it works. And just like there are many different settings on your phone, there are many different HTML attributes we can use to configure HTML elements.

    </Lesson 8>

    <Lesson 9>
    This is the type HTML attribute. We use it to change an input from a text field to a checkbox. And there are many more input types available for us in HTML. To learn what input types we can use, let's go to google.com and search for HTML input types.

    And then we'll open this first w3schools link. As you can see, we have lots of different input types to choose from. Let's use the password input type to add a password input to our page. For that, we will add another input element and write left angle bracket input space type equals password.

    and a right angle bracket right after the ending quote. Save the file, go to our page, reload it, and now we have this text field that hides what I'm typing. The syntax for HTML attributes is straightforward. First goes the attribute name, then the equal sign. The equal sign separates the attribute name from the value we want to set.

    Then goes the actual value we want to set for that attribute. We surround that value with quotes. We can use double quotes, like here. Or we can use single quotes, like this. And it's gonna be valid HTML code that works.

    It's perfectly fine to use either double quotes or single quotes. But make sure that if you start an attribute's value with a single quote, you end it also with a single quote like here. And if you start with a double quote, you end it with a double quote too.

    Doing it like this or like this is valid. But if you use different quotes to start and end the value, then this is an invalid HTML. And if I save and reload, the input is gone. Let me undo the changes to make the code valid again.

    And also, if you are using single quotes, don't confuse them with backticks. Let me quickly show you the difference between the single quotes and the backticks. So these are the single quotes and these are the backticks.

    Using the single quotes is valid and using the backticks is not. And if I save and reload, the first password field that uses the single quotes works as expected and the second password field that uses the backticks doesn't work and it works like a regular text field.

    This is because when we set an invalid attribute type, the browser uses the default value, which is text. Okay, let's remove this invalid input. What also is important is that according to the HTML syntax, we must have at least one space before an attribute's name, like this. Because if I remove this space, it's impossible to tell here where is the element's name and where is the attribute.

    This becomes invalid HTML, and if we save and reload the page, the field disappears completely. So let me return the space here to make our HTML valid again. Save, reload, and the field is back.
    </Lesson 9>

    <Lesson 10>
    Next, we will learn another useful attribute we can add to our inputs. So to use that attribute, let's put the cursor here.

    And remember, we need to have at least one space before every attribute. So let's add space. Then goes the attribute name. We will write placeholder. And then equals. This code adds a pair of double quotes automatically for us. Then as a value here, we will write your password.

    Save. Reload. And now, inside this input, we have the text that we used as a value for the placeholder attribute. And this placeholder text is only displayed when there is nothing inside the password field. And the placeholder disappears as soon as we start typing. When we remove all the characters from the password field, the placeholder is visible again.

    We can set any text we want as the placeholder's value, and it will be displayed as the text placeholder inside the password field. So to practice that, let's remove this text and type in your password instead. Save, reload, and now this text is displayed here as the placeholder.

    and we will use the placeholder attribute for the search field in the Reddit clone project.

    The order in which we add attributes to our HTML elements doesn't matter. For example, if we move the placeholder attribute before the type attribute, save and reload, nothing changes. The placeholder is still here and the field still hides whatever we type. Just make sure that you have at least one space before every attribute and you'll be fine.

    Remember, when we added an input element like this, without any attributes, the browser displayed a regular text field on the page. So this input doesn't have any attributes, but still works as a text field.

    This is because in HTML certain attributes, like the type attribute, they have default values. And when we don't specify the type attribute for this input element explicitly, under the hood the browser adds the type attribute to the input anyway.

    And it uses the default value for the type attribute, which is text. So writing it like this is the same as writing it like this. If we save and reload, the text field is still here and we can type in whatever we want. And if we don't add this type text to the input, like this, the browser adds it automatically anyway.

    We didn't add type text to the inputs at the beginning of this tutorial because it's easier to start learning without it. But now that you know about attributes, I recommend always specifying type text when you add a text field. Doing so is considered best practice among developers because it's clearer and more consistent.

    Some HTML elements have their own unique attributes. For example, input elements can use the placeholder and the type attributes. But if we add these attributes to a paragraph, for example, the browser will just ignore them. So, for example, if we add a paragraph,

    and just copy and paste these attributes to this paragraph. Save. Reload. This is just a paragraph of text on the web page and the attributes, they are just ignored. So basically, they are useless to use with paragraphs. Let's remove them.

    The last important thing to know about HTML attributes is that we need to place all attributes in the opening tag. So for non-void elements like paragraphs, that would be here, and HTML does not allow attributes in the closing tags. If we add an attribute to a closing tag, the HTML will become invalid and won't work properly.

    For void elements like inputs, which only have an opening tag, we add attributes after the element's name.
    </Lesson 10>

    <Lesson 11>
    Now, before we get to the practice exercises, let's see what happens if we don't add the .html extension to our files. For that, we will open the file Explorer, right-click on this file, choose Rename,

    Remove .html and press Enter. Then we will go to the folder containing this file to open it in the browser. Right-click on the file, Open With, and the first thing that's changed, the Open with Google Chrome option is gone. To open the file in Chrome anyway, we can just drag it into Chrome.

    And now we can see the contents of this file as just plain text. No checkboxes, no paragraphs or text fields. Just plain text with all new lines we added. So, without the proper .html extension, the browser

    doesn't recognize the HTML code and shows the content of the file as plain text. And to fix this, we need to make sure that our file has the proper .html extension. Let's fix this. For that, we'll go to VS Code, right-click on the file and click Rename. And then we will add .html at the end of the file.

    And now, when we go to the folder containing our website's code and right-click on the file, open with, and the Google Chrome option is back. And when we open it with Google Chrome, the browser displays our file as a web page. So, if the browser shows your HTML code as plain text, make sure that this file has the proper .html extension.

    Now, before you continue to the practice exercises, let's go over what we've learned in this tutorial. This will help you to understand and remember the material better. You've learned that to create a web page, we create a file with the .html extension. And the web page is just a bunch of HTML elements and plain text. There are void HTML elements, like input, that contain only an opening tag.

    and also non-void elements that contain an opening tag, content, and a closing tag. We can add attributes inside an opening tag to configure an HTML element. You also learned that there are specific rules we need to stick to when we write HTML code. Those rules are called HTML syntax. If we follow the syntax, our HTML code works the way we want.

    If we break the syntax, our HTML code may not work at all or can produce the results we don't want. You also learned how to create text fields, checkboxes, and password fields by adding the type attribute to the input HTML element.

    You learned that the browser does not display new lines, and instead of many spaces and new lines, shows only one space. And if we want our elements to be on separate lines, we can use the paragraph HTML element.

    Then, you learned about child and parent elements. You learned that placing child elements inside parent elements is called nesting. And for better code readability, we indent child elements. By learning all this, you have created a good foundation for writing proper HTML code and learning more advanced topics in the next tutorial.
    </Lesson 11>
    <Quiz 3>
    <lessons the quizz covers>
      Lesson 9, Lesson 10, Lesson 11
    </lessons the quizz covers>
    <Insert after>
      Lesson 11
    </Insert after>
    <Quizz Title>
      Configure with HTML Attributes
    </Quizz Title>
    <Quizz description>
      Show how well you understand HTML attributes, their syntax, and their effect.
    </Quizz description>

    <Question 1>
      <Description>
        What does the type attribute do when added to an <input> element?
      </Description>
      <Answer 1>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Changes the color of the text field
        </Content>
        <Explanation>
          Why? The type attribute doesn’t affect visual styling—it changes the behavior of the input.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Adds a label next to the input field
        </Content>
        <Explanation>
          Why? Labels must be added using separate elements like <label> or <p>.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          Changes the kind of input, like text, password, or checkbox
        </Content>
        <Explanation>
          Why? The type attribute defines how the input behaves, like hiding characters or showing a checkbox.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 9
      </Where discussed>
    </Question 1>

    <Question 2>
      <Description>
        You write <input type="password">. What happens on the page?
      </Description>
      <Answer 1>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          The user sees a field where characters are hidden as they type
        </Content>
        <Explanation>
          Why? The "password" type masks the user input for privacy, just like on login forms.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          The browser asks for a system password
        </Content>
        <Explanation>
          Why? The browser never asks for passwords automatically based on the input type.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          It creates a button labeled “password”
        </Content>
        <Explanation>
          Why? <input type="password"> creates a hidden character field, not a button.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 10
      </Where discussed>
    </Question 2>

    <Question 3>
      <Description>
        Which of these is a valid use of the placeholder attribute?
      </Description>
      <Answer 1>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          <input type="text" placeholder="Enter your name">
        </Content>
        <Explanation>
          Why? This syntax adds a placeholder text that disappears when the user starts typing.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <p placeholder="Name">
        </Content>
        <Explanation>
          Why? The placeholder attribute is not valid on <p> elements and will be ignored.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          <input "placeholder=Name">
        </Content>
        <Explanation>
          Why? This breaks HTML syntax because it’s missing the attribute name and proper quotation placement.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 11
      </Where discussed>
    </Question 3>

    <Question 4>
      <Description>
        You want to specify an attribute on an <input> element. Where should the attribute be placed?
      </Description>
      <Answer 1>
        <Is Correct>
          yes
        </Is Correct>
        <Content>
          Inside the opening tag, after the element name
        </Content>
        <Explanation>
          Why? All attributes must be placed inside the opening tag of an element, never in the closing tag.
        </Explanation>
      </Answer 1>
      <Answer 2>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Inside the closing tag
        </Content>
        <Explanation>
          Why? HTML does not allow attributes inside closing tags; this would be invalid syntax.
        </Explanation>
      </Answer 2>
      <Answer 3>
        <Is Correct>
          no
        </Is Correct>
        <Content>
          Outside of any tags
        </Content>
        <Explanation>
          Why? Attributes placed outside of tags are ignored and not recognized by the browser.
        </Explanation>
      </Answer 3>
      <Where discussed>
        Lesson 11
      </Where discussed>
    </Question 4>
    </Quiz 3>
</SECTION 1>

</Previous Lessons>

<Lessons for which I want you create quizzes>
    <SECTION 2>
        <Lesson 12>
        In this tutorial, we will learn how to create links to another page or a website with HTML. For example, this list of popular communities is a bunch of links. And if we click one of these links, we will go to another page. So let's start by creating a new web page.

        To do that, in VS Code, we'll click this icon to create a new file and we'll name the file links.html. Make sure that the file name ends with .html, otherwise it won't work.

        Then we'll press Enter to actually create the file, and we'll close the File Explorer to have more space. Inside our new file, let's add a link that will open reddit.com. To create the link, we'll type left angle bracket, A, right angle bracket. Notice that VS Code added the closing tag for us because links have a closing tag.

        Then, between the tags, we'll type link to Reddit. We will see this text on our website. Next, inside the opening tag, we'll type space href equals, and then between the double quotes, we'll type https://www.reddit.

        and make sure that you type it exactly as you see it here. Then we'll save the file and to open it in the browser, we'll go to the website's folder, then right-click on the file, open with, Google Chrome.

        I'm going to zoom in to see it better. And now we have a web page with this link to Reddit. And if we click this link, we will go to the Reddit website. Let's return to our web page and learn how the link works. So we use the a element to add a link to our page. A is short for anchor.

        The content of the A element is what we see on our page as the link that we can click. So if we change it to this is a link, then we'll see this is a link. And if we change it to Reddit,

        Now it's reddit. For the anchor element to actually be a link and open a website when we click it, we need to use the href attribute. Let's delete the href attribute and see what happens to the page. So when we reload it, this becomes just text that doesn't lead anywhere and we cannot click it.

        And if we put back the href attribute, this becomes a clickable link again. As you learned from the previous tutorial, this is an attribute name. href is short for hypertext reference with just a fancy name for link.

        Then we use the equal sign to tell the browser that we're setting the href attribute with the link that goes to the right of the equal sign between the double quotes. This link is the actual link we want to open when we click it. And if we change this link to google.com, then save and reload the page, the text of the link we see here is still Reddit.

        But now this link leads to google.com. And if we click it, we open Google, just like we set in the href attribute.
        </Lesson 12>
        <Lesson 13>
        Okay, let's go back to our web page. Having it like this is not a good practice. If our link says it's Reddit, then it must point to Reddit, not Google. And to fix this, we can either change the text or the href link. Let's change the text to Google.

        Save. Reload. Good. Now our link is accurate because it says Google and when we click it, it opens Google.

        Let's also add another link to Reddit to have more practice. To do that, on the new line, we'll write left angle bracket A to create the anchor element. Next, we'll add the href attribute to configure where this link will go. And then between the double quotes, we'll put the actual link. Usually, you don't need to memorize this link value, and you can just copy it from somewhere else.

        There are plenty of places from where you can copy the link address. And most often you copy it from other websites. So let's use Google to get the link to Reddit. And to open Google, we can use the link we just created. Next, we'll search for Reddit. And then hover over this text, right-click, and click Copy link address.

        To paste the link here between the quotes, you can either right-click here and select Paste, or you can use a keyboard shortcut, which is Command V for Mac or Control V for Windows. Memorize this shortcut because you'll copy and paste text and links frequently while coding. It's gonna save you a ton of time. Let's use the keyboard shortcut, so Command V,

        And here is the link to Reddit. Then after the closing double quote we'll type right angle bracket and the text we would like to display on our web page will be Reddit. Save the file. Go back to our web page.

        And now we have links to Google and to Reddit. And this is how easy it is to create links with HTML. For that we use the a, or anchor, element. What we put inside the content of the element we will see on the web page as the text we can click.

        We configure what page will open when we click the link with the href attribute. We put the website address as the value here between the quotes.
        </Lesson 13>
        <Lesson 14>
        This href attribute is actually unique to links. We cannot use it with other elements like paragraphs or inputs.

        Now let's learn a little bit more about the href value, which is the actual link, or it's often called a URL. A URL is short for Uniform Resource Locator, which simply is an address of a certain webpage or file, like video or image, on the Internet. It's what you put into your browser's address bar to open a website.

        Now let's learn the basics of URLs, because as a developer, you'll use them all the time. For that, on our web page, let's click the Reddit link to open reddit.com. Next, let's click on the address bar a couple of times to reveal the whole URL. So this part of the URL is called authority, which is basically the address of where the whole website is.

        For the Reddit it's this, and for Google it's this. And this part of the URL is called a domain name. To have a domain name like reddit.com or google.com you need to go to a special online service where you can buy and register a domain name.

        Okay, inside this whole reddit.com website there are many pages. And if we click, for example, on this fitness link, a new page opens and the URL changes. The website address is still the same, it's reddit.com.

        But now there is this additional part slash r slash fitness. This additional part is called a path. A path points to a specific page on reddit.com. If we go to another page, let's click, for example, on this post.

        The website's address is still the same, it's red.com, but the path to this page changes. Okay, and the last URL component we'll discuss is this. It is called a scheme. A scheme tells the browser how to find and load the web page or the file our URL points to.

        Most of the links on the Internet start with the HTTPS scheme. HTTPS is short for Hypertext Transfer Protocol Secure, which is simply a special way to pack and deliver a web page or content over the Internet to you. And HTTPS encrypts the web page content so that nobody except you can see it.

        So, links from the Internet start with HTTPS, followed by the website address, and then the path to a specific web page. And this colon and two slashes are the part of the URL syntax, they separate the scheme from the website's address.

        And these were the basics of URLs. Don't worry about memorizing all this right away. You'll encounter links frequently and learn how they work over time.

        </Lesson 14>
        <Lesson 15>
        Now let's go back to our web page. Currently, our links open in the same tab. If we click the reddit.com link, we go to reddit.com in the same browser tab we clicked that link. And the same works for the Google link. But sometimes we want our links to open in a new tab.

        For example, on YouTube, any link you click in the description opens a new tab. So let's learn how to do this for the Reddit link. For that, in our code, we'll put the cursor here and add a space after the href attribute.

        Because remember, according to HTML syntax, we need to separate our attributes with at least one space or a new line. Then we'll type target equals and the value will be underscore blank. Save.

        Reload the page and now when we click the link it opens a new tab. What's important is that this makes only the Reddit link to open in a new tab.

        The Google link still opens in the same tab because we're not setting its target attribute to the underscore blank value. And this will be a task for you to have more practice. Make the Google link to open in a new tab when clicked. For that, use the target attribute and set its value exactly to underscore blank.

        </Lesson 15>

        <Lesson 17>
        These two links point to other websites on the Internet, and they are called external links. External links are the links on your website that point to other websites. We can also have internal links. Internal links point to other web pages within the same website.

        For example, when we open Reddit, these links are internal. And when we click them, we go to another webpage, but it's still on the same Reddit website. So now let's learn how to create such internal links. For that, we'll close the Reddit page.

        And in VS Code, we'll open the file explorer. Now let's create a new file and we'll call it links-internal.html.

        In this file, let's create an internal link that opens the attributes.html when clicked. For that, we will write left angle bracket A space href equals, and we'll leave the value empty for now. Then, after the closing quote, write right angle bracket, and inside the content, let's add attributes page.

        And now let's learn a shorter way to open this file in the browser. For that, we can left-click on its name in the Explorer

        then drag to the tabs area in the browser here, then release the mouse button. This opens our new web page in the browser. Let me zoom in to see it better. And now we have a web page with this link. Currently, the href attribute is empty, which makes our link to reload the page when we click it.

        So if you want your link to reload the current page when clicked, just leave its href attribute empty. Now let's change the href here to actually open the attributes.html page when this link is clicked. This is quite easy to do. For that, here we'll just write attributes

        Save. Reload. And now, when we click this link, it opens the attributes.html webpage.

        This works because both the link internal and the attributes files are in the same folder. So in HTML, when the files are in the same folder, we can use just their names as a URL. Let's add another anchor element here and point to the links.html file.

        For that, as usual, we'll type left angle bracket A and space href equals. Then, because the links.html file is in the same folder as our file, we can just use its name in the href attribute. So links.html. And then the text will be external

        links. Save the file back to our web page and now we have two links here. If you click this link it opens the links.html file. Now let's rename the links.html file to links-external to have consistent naming for our files.

        Now this is better. This file contains internal links and this file contains external. And now, if we reload the page, we get this error that our file could not be accessed.

        This is because we have renamed this file, but our link still refers to the old filename, which is links.html. And this file no longer exists. To fix this, let's change this URL to reflect the new filename. For that, we will click in the address bar and then place the cursor here. Then we just need to add "-external".

        because this is the new name of our file. And if we press Enter, it works. Now let me zoom in a little bit. What we also need to do is to fix the file name here, because now it points to the old file. And if we try to use this link in this state, so if we click this link, it tries to open the old file and fails.

        And the fix is actually quite simple. We just simply need to change this to use the new file name. So we'll type "-external", save, back. And now if we click the link, it works properly.
        </Lesson 17>
        <Lesson 18>
        Notice that in our code we mentioned only the filename, links-external. But when we open it in the browser, the URL in the address bar is actually quite longer. It starts with the same filename, links-external, like here, then follows the name of our website's folder, then it's desktop, it's where we created our website's folder,

        and then it goes further up until it reaches the root folder. On Windows, the path will be similar, only you'll have the C or D drive at the top.

        So this full path from the top all the way down to our file name is called an absolute path. An absolute path is the complete or full path to the web page starting from the protocol and including the full path to the file. Here the protocol is file because the links-external is on our computer.

        This is an absolute path to the file on our computer. An absolute path can also be to a web page on the internet like this. This is an absolute path to a web page on the internet because it includes the protocol, the website address and also the path to the page.

        So inside our links external, these two URLs that we're using to create the links, they both are absolute URLs. On the contrary, in the link internal file, these URLs are relative. They are called relative because they target other web pages relative to the current one.

        Relative URLs, they don't include the full path to the web page. And also we can see that these URLs are relative because they don't have a protocol or a full path to the files. This file contains only relative URLs and this one only absolute URLs. But we can have both absolute and relative URLs in one file.

        To test this, let's copy these relative URLs, paste them here, and see what happens in the browser. And if we save and reload, now we have four links here. Two internal links that point to our web pages, and two external links that point to Google and Reddit. And if we click this link, it opens our attributes page, and if we click

        This link, it opens Google. Now that we have both internal and external links here in one file, this file name is no longer accurate. So let's rename it to just links. Good. Reload the page. And there is that same error that our file could not be accessed.

        We already know that this is because we're trying to open the old links-external file which no longer exists and so the browser cannot find it. To fix this we can simply modify the URL to reflect the new file name. Enter. Great. Also let's remove this link because it points to the old version of this file itself. Save.

        Reload. And now we have three links, two absolute and one relative. Lastly, let's also delete this file because we don't need it anymore.

        Okay, before we continue to the practice exercises, let's review what we've learned so far. We learned that we use the a or anchor HTML element to add a clickable link to our web page. The content of the a element will be visible and clickable on the page. We use the href attribute to set the destination or the URL where we go after clicking that link.

        We also learned that URL or Universe Resource Locator is just a fancy term for a link. And that URLs can be absolute and relative. An absolute URL contains the full path to a web page or resource.

        It has a protocol, the website address, and the path to the webpage on that website. We learned that almost all the links on the Internet start with the HTTPS protocol, which is a secure way to deliver content over the Internet.

        We also learned that a relative URL is a path relative to the current webpage. And we learned that to make a link open in a new tab, we use the target attribute with the underscore blank value.
        </Lesson 18>
    </SECTION 2>
</Lessons for which I want you create quizzes>